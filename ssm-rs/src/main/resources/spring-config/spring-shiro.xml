<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="                                               
        http://www.springframework.org/schema/beans    
        http://www.springframework.org/schema/beans/spring-beans.xsd    
        ">

	

	<!--shiro -->

	<!-- 1. 配置 SecurityManager! -->

	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<!-- <property name="cacheManager" ref="cacheManager"/>配置缓存 -->
		<property name="authenticator" ref="authenticator"></property><!--认证器 -->

		<property name="realms">         <!--自定义认证组件 -->
			<list>
				<ref bean="jdbcRealm" />
			</list>
		</property>


	</bean>

	<!-- 2. 配置 CacheManager. -->
	<!-- <bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager"> 
		<property name="cacheManagerConfigFile" value="classpath:ehcache.xml"/> </bean> -->

	<bean id="authenticator" class="org.apache.shiro.authc.pam.ModularRealmAuthenticator">
		<property name="authenticationStrategy"><!--配置多认证器的认证方式 -->
			<bean class="org.apache.shiro.authc.pam.AtLeastOneSuccessfulStrategy"></bean>
		</property>
	</bean>


	<!-- 3. 配置 Realm (认证和授权) -->
	<bean id="jdbcRealm" class="cn.hnist.shiro.realms.ShiroRealm">

	</bean>

	<!-- 4. 配置 LifecycleBeanPostProcessor. 可以自定的来调用配置在 Spring IOC 容器中 shiro 
		bean 的生命周期方法. -->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />

	<!-- 5. 启用 IOC 容器中使用 shiro 的注解. 但必须在配置了 LifecycleBeanPostProcessor 之后才可以使用. -->
	<bean
		class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
		depends-on="lifecycleBeanPostProcessor" />
	<bean
		class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
		<property name="securityManager" ref="securityManager" />
	</bean>

	<!-- 6. 配置 ShiroFilter -->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean"
		depends-on="roleOrFilter">
		<property name="filters">      <!--配置自定义的filter角色拦截 -->
			<map>
				<entry key="roleOrFilter" value-ref="roleOrFilter" />
			</map>
		</property>

		<property name="securityManager" ref="securityManager" />
		<property name="loginUrl" value="/needLogin" />
		<property name="unauthorizedUrl" value="/unauthorized.jsp" /><!--无权限跳转的url -->

		<!-- 配置哪些页面需要受保护. 以及访问这些页面需要的权限. 1). anon 可以被匿名访问 2). authc 必须认证(即登录)后才可能访问的页面. 
			3). logout 登出. 4). roles 角色过滤器 -->

		<property name="filterChainDefinitions">
			<value>
                /student/submitDetail=anon
				/uploadResource=roleOrFilter["admin,teacher"]
				/addExam=roleOrFilter["admin,teacher"]
				/addExamAction=roleOrFilter["admin,teacher"]
				/exam/showExam=roleOrFilter["admin,teacher"]
				/updateExamDetail=roleOrFilter["admin,teacher"]
				/promoteStudent=roleOrFilter["admin,teacher"]
				/dePromoteStudent=roleOrFilter["admin,teacher"]
				/deleteExam=roleOrFilter["admin,teacher"]			
				/Examing=roleOrFilter["admin,teacher,student"]
                /TeammembersList=roleOrFilter["admin,teacher,student"]
				/changePassword=roleOrFilter["admin,teacher,student"]
				/admin/**=roles[admin]
				/teacher/**=roles[teacher]
				/student/**=roles[student]
				/**= anon
				/*=anon
				
			</value>
		</property>

	</bean>

	<bean id="roleOrFilter" class="cn.hnist.filter.OrAuthorizationFilter" />
</beans>